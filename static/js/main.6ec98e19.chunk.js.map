{"version":3,"sources":["styles.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["GameTitle","styled","h1","MainWrapper","main","GameContainer","div","SectionTitle","h2","GridWrapper","Game","Cell","ButtonsContainer","Button","button","PresetsContainer","ColorPickerWrapper","Rules","section","About","Grid","props","grid","map","rows","r","col","c","key","onClick","e","changeSelectedCell","style","background","color","App","useState","speed","setSpeed","setColor","generation","setGeneration","isPlaying","setIsPlaying","ownLayout","setOwnLayout","usePreset","setUsePreset","intervalRef","useRef","Array","fill","row","setGrid","update","updatedGrid","play","newGrid","JSON","parse","stringify","length","cell","neighbourCounter","i","j","cellRow","cellCol","useEffect","clearInterval","current","setInterval","Math","floor","random","fillGrid","width","emptyGrid","preset1Grid","preset2Grid","Form","as","Row","className","Col","xs","size","value","onChange","target","variant","min","max","onChangeComplete","hex","ListGroup","Item","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ec98e19.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const GameTitle = styled.h1`\n    text-align: center;\n    font-size: 3.5rem;\n    padding: 3rem;\n    width: 100%;\n    color: #fff;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n`;\n\nexport const MainWrapper = styled.main`\n    max-width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    flex-direction: row;\n    border-radius: 5px;\n    background-color: white;\n    // box-shadow: 2.5px 5px 4px #DCDCDC;\n    @media (min-width: 900px) {\n        flex-direction: column;\n        width: 90%; \n        margin: 2rem auto;\n        justify-content:center;\n\t}\n`;\n\nexport const GameContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    // @media (min-width: 900px) {\n    //    flex-direction: row;\n\t// }\n`;\n\nexport const SectionTitle = styled.h2`\n    text-align: center;\n    font-size: 1.6rem;\n    padding: 4rem 1rem;\n    letter-spacing: 2px;\n`;\n\nexport const GridWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    justify-content: center;\n    @media (min-width: 900px) {\n        flex-direction: row;\n        align-items: baseline;\n        width: 60%;\n        margin: 3rem auto;\n        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n\t}\n`;\n\nexport const Game = styled.div`\n    width: 30rem;\n    height: 30rem;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(1.45rem, 1fr));\n    grid-template-rows: repeat(auto-fit, minmax(1.45rem, 1fr));\n    margin: 0.5rem auto;\n    border: 1px solid #D1C6C6;\n    // box-shadow: 2.5px 5px 4px #DCDCDC;\n    @media (min-width: 900px) {\n        width: 50rem;\n        height: 50rem;\n        grid-template-columns: repeat(auto-fit, minmax(2.4rem, 1fr));\n        grid-template-rows: repeat(auto-fit, minmax(2.4rem, 1fr));\n    }\n`;\n\nexport const Cell = styled.div`\n    width: 1.45rem;\n    height: 1.45rem;\n    border: 1px solid #D1C6C6;\n    @media (min-width: 900px) {\n        width: 2.5rem;\n        height: 2.5rem;\n    }\n`;\n\nexport const ButtonsContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 2rem;\n    @media (min-width: 900px) {\n        flex-direction: row;\n        width: 100%;\n        margin: 2rem;\n    }\n`;\n\nexport const Button = styled.button`\n    border-radius: 5px;\n    border: none; \n    padding: 1.5rem;\n    width: 9rem;    \n    cursor: pointer;\n    background-color: transparent;\n    margin-right: 2rem;\n    box-shadow: 0px 2px 4px rgba(0,0,0,.1);\n    transition: box-shadow 1s ;\n    &:hover {\n        box-shadow: 0px 2px 4px rgba(0,0,0,.5);\n    }\n    &:active {  \n        outline: none;\n    }\n`;\n\nexport const PresetsContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    @media (min-width: 900px) {\n        width: 30%;\n        // width: 90%;\n        margin: 3rem auto;\n        //  border: 1px solid red;\n          box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n`;\n\nexport const ColorPickerWrapper = styled.div`\n    margin: 3rem auto;\n`;\n\nexport const Rules = styled.section`\n    width: 50%;\n    margin: 2rem auto;\n    font-size: 1.6rem;\n    // text-align: center;\n`;\n\nexport const About = styled.section`\n    width: 95%;\n    font-size: 1.6rem;\n    padding: 2rem;\n    margin: 5rem auto;\n    text-align: justify;\n    line-height: 1.6;\n`;\n","import React from 'react';\nimport {\n    Game,\n    Cell\n} from './styles';\n\nconst Grid = (props) => {\n    return(\n            <Game>\n                {props.grid.map((rows, r) =>\n                    rows.map((col, c) =>\n                        <Cell key={`${r}-${c}`}\n                            onClick={(e) => props.changeSelectedCell(r, c)}\n                            style={{\n                                background: [rows][col] ? 'white' : props.color,\n                            }}></Cell>\n                    )\n                )}\n            </Game>\n        \n    )\n}\n\nexport default Grid;","import React, { useState, useEffect, useRef} from 'react';\nimport { ChromePicker } from 'react-color';\nimport Grid from './Grid.js';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport './App.css';\nimport {ListGroup, Form, Col, Row} from 'react-bootstrap';\nimport {\n  GameTitle,\n  MainWrapper,\n  Rules,\n  About,\n  SectionTitle,\n  GridWrapper,\n  GameContainer,\n  PresetsContainer,\n  ButtonsContainer,\n  Button,\n  ColorPickerWrapper\n} from './styles';\n// import { Form } from 'react-bootstrap';\n\nfunction App() {\n\n  const rows = 20;\n  const cols = 20;\n  const initialSpeed = 100;\n\n  // Vars used for custom settings\n  const [speed, setSpeed] = useState(initialSpeed);\n  const [color, setColor] = useState('#4C4280');\n  \n  // Vars used for game rendering, to set conditions\n  const [generation, setGeneration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [ownLayout, setOwnLayout] = useState(false);\n  const [usePreset, setUsePreset] = useState(false);\n  const intervalRef = useRef(null);\n\n\n  // ************************\n  // GRID SETUP\n  // ************************\n\n  // Creates empty grid of rows and cols\n \n  const [grid, setGrid] = useState(() => {\n    const grid = new Array(rows).fill(new Array(cols).fill(0)).map(col => col.map(row => row = 0));\n    return grid\n  });\n\n  // Fills grid cells with random values of 0 or 1; Run the function on component mount\n\n  const fillGrid = () => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = Math.floor(Math.random() * 2);\n      }\n    }\n    setGrid(grid);\n  }\n \n  // ************************\n  // GAME SETUP\n  // ************************\n\n  const update = () => {\n    let updatedGrid = play(grid);\n    setGrid(updatedGrid);\n    setGeneration(generation => generation + 1);\n  }\n  \n  \n  const toggle = () => {\n    setIsPlaying(!isPlaying);\n  }\n\n  const play = (grid) => {\n    // DEEP COPY\n    // const newGrid = grid.map(g => [...g])\n    const newGrid = JSON.parse(JSON.stringify(grid));\n\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        const cell = grid[row][col]; // value of cell 0 or 1\n        let neighbourCounter = 0;\n        // Iterating over 8 neighbouring cells\n        for (let i = -1; i < 2; i++) {\n          for (let j = -1; j < 2; j++) {\n            // To avoid couting cell itself\n            if (!(i === 0 && j === 0)) {\n              const cellRow = row + i;\n              const cellCol = col + j;\n              // To stay within the grid\n              if (cellRow > 0 && cellRow < grid.length && cellCol > 0 && cellCol < grid.length) {\n                neighbourCounter += grid[cellRow][cellCol];\n                \n              }\n            }\n          }\n        }\n      \n        if (cell === 0 && neighbourCounter === 3) {\n           newGrid[row][col] = 1;\n        } else if ((cell === 1 && neighbourCounter > 3) || (cell === 1 && neighbourCounter < 2)) {\n           newGrid[row][col] = 0;\n        }\n      }\n    }\n    \n    return newGrid;\n\n  }\n\n  const stopGame = () => {\n    const emptyGrid = new Array(rows).fill(new Array(cols).fill(0)).map(col => col.map(row => row = 0));\n    setIsPlaying(false);\n    setGrid(emptyGrid);\n    setGeneration(0);\n    setSpeed(initialSpeed);\n    setOwnLayout(false);\n  };\n\n  // ************************\n  // CUSTOM FEATURES\n  // ************************\n \n  // Change color taken from color picker\n\n  const handleChangeComplete = (color) => {\n    setColor(color.hex);\n  };\n\n  // Change state of selected grid cell; \n\n  const changeSelectedCell = (rows, col) => {\n    const newGrid = [...grid];\n    if (!isPlaying) {\n      newGrid[rows][col] = grid[rows][col] ? 0 : 1;\n      setGrid(newGrid);\n      setOwnLayout(true);\n    }\n    return newGrid;\n  };\n\n  // Custom presets\n\n  const preset1 = () => {\n    let preset1Grid = new Array(rows).fill(new Array(cols).fill(0)).map(col => col.map(row => row = 0));\n    for (let i = 0; i < rows; i += 2) {\n      for (let j = 0; j < cols; j++) {\n        preset1Grid[i][j] = 1;\n      }\n    }\n    setUsePreset(true);\n    setGrid(preset1Grid);\n  }\n\n  const preset2 = () => {\n    let preset2Grid = new Array(rows).fill(new Array(cols).fill(0)).map(col => col.map(row => row = 0));\n    for (let i = 0; i < rows; i ++) {\n      for (let j = 0; j < cols; j+=2) {\n        preset2Grid[i][j] = 1;\n      }\n    }\n    setUsePreset(true);\n    setGrid(preset2Grid);\n  }\n\n  //\\\\  row, col //\\\\\n  // 1. row -1, col -1\n  // 2. row -1, col\n  // 3. row - 1, col +1\n  // 4. row, col -1,\n  // 0. row, col\n  // 5. row, col +1,\n  // 6. row +1, col -1\n  // 7.  row +1, col\n  // 8.  row +1, col +1\n\n  \n  useEffect(() => {\n    if (isPlaying && generation === 0) {\n      if (ownLayout || usePreset) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = setInterval(update, speed);\n      } else {\n        fillGrid();\n        clearInterval(intervalRef.current);\n        intervalRef.current = setInterval(update, speed);\n      }\n    } \n    else if (isPlaying && generation > 0) {\n      if (ownLayout || usePreset) {\n        clearInterval(intervalRef.current);\n        \n        intervalRef.current = setInterval(update, speed);\n      } else {\n        clearInterval(intervalRef.current);\n        intervalRef.current = setInterval(update, speed);\n      }\n    } else if (!isPlaying) {\n      clearInterval(intervalRef.current);\n    } \n  }, [isPlaying, speed, generation]);\n\n  return (\n    <>\n      <GameTitle>Conway's Game of Life</GameTitle>\n      <MainWrapper>\n       \n        <GameContainer>\n          <GridWrapper>\n            <SectionTitle style={{ width: '100%' }}>Generation # {generation}</SectionTitle>\n            <Grid grid={grid} changeSelectedCell={changeSelectedCell} color={color}/>\n            <ButtonsContainer>\n              <Button onClick={toggle}>{isPlaying ? 'Pause' : 'Start'}</Button>\n              <Button onClick={stopGame}>Stop</Button>\n            </ButtonsContainer>\n          </GridWrapper>\n          <PresetsContainer>\n            <>\n              <SectionTitle>Presets</SectionTitle>\n              <ButtonsContainer>\n                <Button onClick={preset1}>Preset 1</Button>\n                <Button onClick={preset2}>Preset 2</Button>\n             </ButtonsContainer>\n            </>\n            <>\n              <SectionTitle>Settings</SectionTitle>\n              <Form as={Row} className='justify-content-md-center'>\n                <Col xs='8'>\n                  <RangeSlider size='m' value={speed} onChange={(e) => setSpeed(e.target.value)} variant='warning' min={100}\n                    max={1000}/>\n                </Col>\n              </Form>\n              <ColorPickerWrapper>\n                <ChromePicker color={color} onChangeComplete={handleChangeComplete} />\n              </ColorPickerWrapper>\n            </>\n          </PresetsContainer>\n        </GameContainer>\n        <Rules>\n          <SectionTitle>Rules</SectionTitle>\n          <ListGroup>\n            <ListGroup.Item>Live cell with fewer than 2 live neighbors dies</ListGroup.Item>\n            <ListGroup.Item>Live cell with 2 or 3 live neighbors lives on to the next generation.</ListGroup.Item>\n            <ListGroup.Item>Live cell with more than 3 live neighbors dies.</ListGroup.Item>\n            <ListGroup.Item>Dead cell with exactly 3 live neighbors becomes a live cell.</ListGroup.Item>\n          </ListGroup>\n        </Rules>\n        <About> \n          <SectionTitle>About</SectionTitle>\n          <p>Conway’s <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel=\"noopener noreferrer\"> Game of Life</a> is a cellular automaton devised by British mathematician John Horton Conway in 1970.</p>\n          <p>A player interacts with the Game of Life by creating an initial configuration and observing how it evolves. The player can also use one of two predefined presets or just click Start button to have \n              the initial configuration created by the program instaed.</p>\n          <p>The player can also changed color of the living sells and the speed in which cells move to the next generation. The chnage of speed can be done only when the game is paused or stopped.</p>\n        </About>\n      </MainWrapper>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}